package com.cn.hwyl.main;

import java.util.Date;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;

import org.apache.log4j.Logger;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.cn.hwyl.module.FirstAidModule;
import com.cn.hwyl.module.OrganizeModule;
import com.cn.hwyl.module.PermissionsModule;
import com.cn.hwyl.module.SynchronousModule;
import com.cn.hwyl.module.UserModule;
import com.cn.hwyl.pojo.HospitalServiceCenter;
import com.cn.hwyl.pojo.request.BodyRequest;
import com.cn.hwyl.pojo.request.HeadRequest;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

/**
 * 此类为端点服务类，它的方法publish用于将一个已经添加了@WebService注解对象绑定到一个地址的端口上。
 * 
 * @WebService
 * 它是一个注解，用在类上指定将此类发布成一个ws. Endpoint
 */
@WebService 
public class WebServiceCP{
	
	private static Logger logger = Logger.getLogger(WebServiceCP.class);

	private static ApplicationContext ac = new ClassPathXmlApplicationContext("spring-mybatis.xml");
	
	// exclude=true时，该方法不会被发布@WebMethod(exclude = false)
	public String callService(String h, String b) {
		logger.info("callService HeadRequest param{0} is:::" + h.toString());
		logger.info("callService BodyRequest param{1} is:::" + b.toString());

		Gson gson = new Gson();
		HeadRequest head = gson.fromJson(h, new TypeToken<HeadRequest>() {
		}.getType());

		BodyRequest body = gson.fromJson(b, new TypeToken<BodyRequest>() {
		}.getType());

		String result = null;
		String service = head.getService();
		// 用户模块
		if (service.contains("User_Login")) {
			result = UserModule.userAll(head, body);
		}
		// 急救模块
		if (service.contains("FirstAid_")) {
			result = FirstAidModule.firstAidAll(head, body);
		}
		// 机构模块
		if (service.contains("Organize_")) {
			result = OrganizeModule.organizeAll(head, body);
		}
		// 权限模块
		if (service.contains("Permissions_")) {
			result = PermissionsModule.permissionsAll(head, body);
		}

		return result;
	}
	@WebMethod
	public String testLocal(@WebParam(name="mytest")String mytest){
		return mytest;
	}
	
	@WebMethod
	public String dataService(String head, String body) {
		logger.info("callService HeadRequest param{0} is:::" + head.toString());
		logger.info("callService BodyRequest param{1} is:::" + body.toString());

		Gson gson = new Gson();
		String result = null;

		HeadRequest q = gson.fromJson(head, new TypeToken<HeadRequest>() {
		}.getType());

		HospitalServiceCenter hospitalServiceCenter = gson.fromJson(body, new TypeToken<HospitalServiceCenter>() {
		}.getType());

		logger.info("dataService  param{} is:::" + hospitalServiceCenter.toString());

		if ("synchronousDataByOrganize".equals(q.getService())) {
			result = SynchronousModule.synchronousAll(q, hospitalServiceCenter);
		}
		return result;
	}

	
	
	public static void main(String[] args) {
		Gson gson = new Gson();
		HospitalServiceCenter hos = new HospitalServiceCenter();
		
		hos.setCenterType("centerType");
		hos.setServiceCenterGroupCode("cerviceCenterGroupCode");
		hos.setChannelCode("channelCode");
		hos.setChannelType("channelType");
		hos.setCity("city");
		hos.setContractNo("contractNo");
		hos.setCountry("country");
		hos.setFriendOrgnize("friendOrgnize");
		hos.setGateLoginAccount("gateLoginAccount");
		hos.setGatePassword("gatePassword");
		hos.setLegalPerson("legalPerson");
		hos.setMakeOrgnize("makeOrgnize");
		hos.setMakeType("makeType");
		hos.setMemo("memo");
		hos.setNetConfigId("netConfigId");
		hos.setNetSolutionTemplate("netSolutionTemplate");
		hos.setOrderNo("orderNo");
		hos.setOrgAddress("orgAddress");
		hos.setOrgCode("orgCode");
		hos.setOrgHead("orgHead");
		hos.setOrgHeadphone("orgHeadphone");
		hos.setOrgId("orgId");
		hos.setOrgName("orgName");
		hos.setOrgState("orgState");
		hos.setOrgType("orgType");
		hos.setOspDomain("ospDomain");
		hos.setParentOrgCode("parentOrgCode");
		hos.setProvince("province");
		hos.setRecordNumPer(123456);
		hos.setRegion("region");
		hos.setRuleUnit("ruleUnit");
		hos.setServiceCenterCode("serviceCenterCode");
		hos.setServiceCenterGroupName("serviceCenterGroupName");
		hos.setUpdateTime(new Date());
		hos.setUpdateUserId("updateUserId");
		
		System.out.println(gson.toJson(hos));
		
	}
	
	
	
}
